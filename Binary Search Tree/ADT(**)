// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* left;
    struct node* right;
}Node;

Node* createnode(int data){
    Node* newnode=(Node*)malloc(sizeof(Node*));
    newnode->data=data;
    newnode->left=newnode->right=NULL;
    
    return newnode;
}

Node* insert(Node* root,int data){
    
    if(root==NULL){return createnode(data);
    }
    
    if(data<root->data){
        root->left=insert(root->left,data);
    }
    else if(data>root->data){
        root->right=insert(root->right,data);
    }
    
    return root;
}

Node* find(Node* root,int data){
    
    if(root==NULL|| root->data==data){return root;}
    
    if(data<root->data){
        return find(root->left,data);
    }
    else{
        return find(root->right,data);
    }
}

Node* findmin(Node* root){
    while(root && root->left !=NULL){
        root=root->left;
    }
    return root;
}

Node* findmax(Node* root){
    while(root&& root->right !=NULL){
        root=root->right;
    }
    return root;
}



Node* inorder(Node* root){
    if(root!=NULL){
        inorder(root->left);
        printf("%d ",root->data);
        inorder(root->right);
    }
}

Node* preorder(Node* root){
    if(root!=NULL){
        printf("%d ",root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

Node* postorder(Node* root){
    if(root!=NULL){
        postorder(root->left);
        postorder(root->right);
        printf("%d ",root->data);
    }
}


int main() {
     
     Node* root=NULL;
     int x,y;
     
     
     
     while(1){
         printf("Enter 1-Insert,2-Inorder transversal,3-Preorder,4-Postorder,5-find,6-findmin,7-findmax,9-Exit :");
         scanf("%d",&x);
         switch(x){
             case 1:
                printf("Enter the value to inserted:");
                scanf("%d",&y);
                root=insert(root,y);
                printf("Successfully inserted!!!\n\n");
                break;
            case 2:
                printf("Inorder transversal:\n\n");
                inorder(root);
                printf("\n");
                break;
           case 3:
                printf("preorder transversal:\n\n");
                preorder(root);
                printf("\n");
                break;
            case 4:
                printf("postorder transversal:\n\n");
                postorder(root);
                printf("\n");
                break;
            case 5:
                printf("Enter the element to find:");
                scanf("%d",&y);
                Node* found=find(root,y);
                if(found!=NULL){
                    printf("%d is found",found->data);
                }
                else{
                    printf("%d not found",y);
                }
                printf("\n");
                break;
            case 6:
                Node* foundd=findmin(root);
                if(foundd!=NULL){
                    printf("%d - MINIMUM",foundd->data);
                }
                else{
                    printf("No minimum!!!");
                }
                printf("\n");
                break;
            case 7:
                Node* founddd=findmax(root);
                if(founddd!=NULL){
                    printf("%d -- Maximum",founddd->data);
                }
                else{
                    printf("No MAXIMUM");
                }
                printf("\n");
                break;
            case 8:
            
                 
            case 9:
                printf("Exiting....\n\n");
                return 0;
            default:
               printf("Invalid Choice!!!\n\n");
         }
     }
     
     
     
    return 0;
}
